#!/usr/bin/env node

/**
 * Module dependencies.
 */

let path = require('path')
var app = require('../app');
var debug = require('debug')('simplechatws:server');
var socket = require('./socket');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
let http_module;
let server;
/** Scelta di HTTP o HTTPS a seconda dei parametri
 *  passati all'avvio
 */
if(process.env.HTTPS !== undefined)
{
  /** Cartella di default dove cercare i certificati
   */
  let certs_dir = 'https_certs'
  /** altrimenti li ricerca nel path fornito
   */
  if(process.env.HTTPS !== "") {
    certs_dir = process.env.HTTPS
  }
  debug("Protocol: ", "HTTPS")
  /** Per leggere i file con i certificati
   */
  let fs = require('fs')
  /** modulo per https
   */
  http_module = require('https');
  /** Opzioni per individuare i cerficati
   */
  let https_opt
  try {
    https_opt = {
      key: fs.readFileSync(path.join(certs_dir,'server.key')),
      cert: fs.readFileSync(path.join(certs_dir,'server.crt'))
    }
  } catch (e) {
    console.error("Cannot read certs files:",e)
    process.exit(1)
  }
  /** Creazione effettiva dei certificati
   */
  server = http_module.createServer(https_opt, app);
}
else
{
  debug("Protocol: ", "HTTP")
  /** modulo per http
   */
  http_module = require('http');
  /** Creazione di un semplice server http
   */
  server = http_module.createServer(app);
}
/**
 * lega Socket.io al server web appena inizializzato
 */
let io = socket(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
